{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","i","nrows","row","j","ncols","push","Math","random","chanceLightStartsOn","coord","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","y","x","flipCell","every","cell","setState","_this2","gameBoard","rowIndex","key","col","colIndex","src_Cell_0","concat","flipCellsAround","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb9eb86f.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe();\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, { Component } from 'react';\nimport Cell from './Cell';\nimport './Board.css';\n\nclass Board extends Component {\n    static defaultProps = {\n        nrows: 5,\n        ncols: 5,\n        chanceLightStartsOn: .25,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            hasWon: false,\n            board: this.createBoard()\n        };\n    }\n\n    /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n    createBoard() {\n        let board = [];\n        // create array-of-arrays of true/false values\n        for (let i = 0; i < this.props.nrows; i++) {\n\t\t\tlet row = [];\n            for (let j = 0; j < this.props.ncols; j++) {\n\t\t\t\trow.push(Math.random() < this.props.chanceLightStartsOn);\n            }\n\t\t\tboard.push(row);\n        }\n        return board;\n    }\n\n    /** handle changing a cell: update board & determine if winner */\n\n    flipCellsAround(coord) {\n        let { ncols, nrows } = this.props;\n        let board = this.state.board;\n        let [y, x] = coord.split('-').map(Number);\n\n        function flipCell(y, x) {\n            // if this coord is actually on board, flip it\n\n            if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n                board[y][x] = !board[y][x];\n            }\n        }\n\n        // flip this cell and the cells around it\n\t\tflipCell(y,x);\n\t\tflipCell(y+1,x);\n\t\tflipCell(y-1,x);\n\t\tflipCell(y,x+1);\n\t\tflipCell(y,x-1);\n        // win when every cell is turned off\n\t\tlet hasWon = board.every(row => row.every(cell => !cell));\n\t\tthis.setState({ board: board, hasWon: hasWon });\n    }\n\n    /** Render game board or winning message. */\n    render() {\n\t\t// if the game is won, just show a winning msg & render nothing else\n\t\tlet gameBoard = this.state.hasWon \n\t\t? <div className='winner'>\n            <span className='neon-orange'>YOU</span>\n            <span className='neon-blue'>WIN!</span>\n          </div>\n\t\t: <div>\n\t\t\t<div className='Board-title'>\n\t\t\t\t<div className='neon-orange'>Lights</div>\n\t\t\t\t<div className='neon-blue'>Out</div>\n\t\t\t</div>\n\t\t\t<table className=\"Board\">\n\t\t\t\t<tbody>\n\t\t\t\t\t{this.state.board.map((row, rowIndex) => (\n\t\t\t\t\t\t<tr key={rowIndex}>\n\t\t\t\t\t\t\t{row.map((col, colIndex) => \n\t\t\t\t\t\t\t\t<Cell \n\t\t\t\t\t\t\t\t\tisLit={col}\n\t\t\t\t\t\t\t\t\tkey={`${rowIndex}-${colIndex}`}\n\t\t\t\t\t\t\t\t\tflipCellsAroundMe={() => this.flipCellsAround(`${rowIndex}-${colIndex}`)}\n\t\t\t\t\t\t\t\t/>)}\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t))}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\n        return (\n\t\t<div>\n\t\t\t{gameBoard}\n\t\t</div>\n\t\t);\n    }\n}\n\nexport default Board;","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}